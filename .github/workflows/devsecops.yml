# Kezie Iroha 05-2025
# Basic DevSecOps CI/CD pipeline for Terraform projects
# This GitHub Actions workflow is designed to perform static security analysis and checks on Terraform code.
# It includes steps for initializing Terraform, formatting checks, validation, and running security tools like tfsec/Trivy, Checkov, Snyk and Terrascan.
# The workflow is triggered on push and pull request events to the main branch.

name: Terraform DevSecOps CI

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  devsecops:
    name: Static Security & Terraform Checks
    runs-on: ubuntu-latest
    continue-on-error: false
    defaults:
      run:
        working-directory: aws-lab

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.0

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3.1.0
      with:
        terraform_version: 1.6.6

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Validate
      run: terraform validate

    # Commented out due to excessive execution time.
    # - name: Terraform Plan
    #   run: |
    #     echo "::group::Terraform Plan"
    #     time terraform plan -out=tfplan
    #     echo "::endgroup::"

    - name: Install Checkov
      run: pip install checkov

    - name: Run Checkov
      run: checkov -d . -o sarif > checkov.sarif || true

    - name: Run Terrascan
      uses: tenable/terrascan-action@main
      with:
        iac_type: 'terraform'
        iac_version: 'v14'
        policy_type: 'aws'
        only_warn: true
      continue-on-error: true

    - name: Run Trivy IaC Scan
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'
      continue-on-error: true

    # TFsec optional, but it will be deprecated in favor of Trivy
    # - name: Install tfsec
    #   run: |
    #     curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

    # - name: Run tfsec
    #   run: |
    #     tfsec . --format table || true
    #     tfsec . --format sarif --out tfsec.sarif || true      
    # - name: Upload tfsec SARIF
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: aws-lab/tfsec.sarif
    #     category: tfsec
    #   continue-on-error: true

    - name: Upload Checkov SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: aws-lab/checkov.sarif
        category: checkov
      continue-on-error: true

    - name: Validate Trivy SARIF
      if: success() || failure()
      run: |
        if [ -s trivy-results.sarif ] && jq empty trivy-results.sarif; then
          echo "Valid SARIF file. Uploading..."
        else
          echo "Invalid or missing SARIF file. Skipping upload."
          rm -f trivy-results.sarif
        fi
      continue-on-error: true

    - name: Upload Trivy SARIF (safe)
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: aws-lab/trivy-results.sarif
        category: trivy
      continue-on-error: true

  snyk:
    name: Snyk IaC Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Ensure reports directory exists
        run: mkdir -p reports

      - name: Run Snyk IaC Scan
        continue-on-error: false
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: |
            aws-lab/
          args: --severity-threshold=high
          sarif: true

      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/snyk.sarif